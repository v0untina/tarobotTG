#–°–î–ï–õ–ê–¢–¨ –û–ë–†–ê–ë–û–¢–ö–£ –°–û–û–ë–©–ï–ù–ò–ô, –ß–¢–û–ë–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ú–û–ì –ù–ê–ü–ò–°–ê–¢–¨ –¢–û–õ–¨–ö–û –û–î–ù–û –°–û–û–ë–©–ï–ù–ò–ï
#–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–¢–¨ –†–ê–ë–û–¢–£ –ò–ò
#–ü–û–î–ö–õ–Æ–ß–ò–¢–¨ –ö –ë–î –ò –û–ì–†–ê–ù–ò–ß–ò–¢–¨ –ö–û–õ–ò–ß–ï–°–¢–í–û –ó–ê–ü–†–û–°–û–í –í –î–ï–ù–¨
#–°–î–ï–õ–ê–¢–¨ –†–ï–ö–õ–ê–ú–£ –ò –ü–†–û–î–£–ú–ê–¢–¨ –ú–ê–†–ö–ï–¢–ò–ù–ì
#–°–î–ï–õ–ê–¢–¨ –§–ò–®–ö–ò –ü–û –¢–ò–ü–£ –†–ê–°–ö–õ–ê–î –ö–ê–ñ–î–û–î–ù–ï–í–ù–´–ô
#–î–û–ë–ê–í–õ–Ø–¢–¨ –§–û–¢–ö–ò –ö–ê–†–¢–û–ß–ï–ö
#–°–î–ï–õ–ê–¢–¨ –ü–û–î–ë–û–†–ö–£ –õ–Æ–î–ï–ô –° –ü–û–•–û–ñ–ò–ú–ò –ó–ê–ü–†–û–°–ê–ú–ò –ò –ü–†–û–ë–õ–ï–ú–ê–ú–ò

import random
import asyncio
from pprint import pprint
from typing import Dict, List, Optional
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.database import db_start,get_user_id,get_update_count
import httpx
from dotenv import load_dotenv
from typing import List, Tuple
import os
from tarot_deck import TAROT_DECK, LOADING_MESSAGES, WELCOME_TEXT
from app.keyboards import  get_spreads_keyboard, get_continue_keyboard

load_dotenv()

TOKEN = os.getenv('BOT_TOKEN')
TAROT_API_URL = os.getenv('TAROT_API_URL')
TAROT_API_KEY = os.getenv('TAROT_API_KEY')

bot = Bot(token=TOKEN)
dp = Dispatcher()


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TarotReading(StatesGroup):
    awaiting_spread_type = State()
    awaiting_custom_spread = State()
    awaiting_question = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
get_spreads_keyboard()
get_continue_keyboard()

async def on_startup():
    await db_start()
    print('Tarot Bot Started')

# –•—ç–Ω–¥–ª–µ—Ä—ã
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await get_user_id(message.from_user.id,message.from_user.username)

    await state.set_state(TarotReading.awaiting_spread_type)
    await message.answer(
        WELCOME_TEXT,
        parse_mode='MarkdownV2',
        reply_markup=get_spreads_keyboard()
    )

@dp.callback_query(F.data == "new_reading")
async def new_reading_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)


@dp.callback_query(F.data == "cancel")
async def cancel_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")


@dp.callback_query(F.data.startswith("spread_"))
async def spread_selected_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(spread_type=callback.data)
    await state.set_state(TarotReading.awaiting_question)
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {get_spread_name(callback.data)}\n\n"
        "–¢–µ–ø–µ—Ä—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é:"
    )


@dp.callback_query(F.data == "custom_spread")
async def custom_spread_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TarotReading.awaiting_custom_spread)
    await callback.message.edit_text(
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ –≤–∞—à–µ–º —Ä–∞—Å–∫–ª–∞–¥–µ (–æ—Ç 1 –¥–æ 15) "
        "–∏ –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
        "–ü—Ä–∏–º–µ—Ä: \"3: –õ—é–±–æ–≤—å, –ö–∞—Ä—å–µ—Ä–∞, –ó–¥–æ—Ä–æ–≤—å–µ\""
    )


@dp.message(TarotReading.awaiting_custom_spread)
async def handle_custom_spread(message: types.Message, state: FSMContext):
    try:
        parts = message.text.split(":", 1)
        num_cards = int(parts[0].strip())

        if not 1 <= num_cards <= 15:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 15")
            return

        positions = [p.strip() for p in parts[1].split(",")] if len(parts) > 1 else []

        await state.update_data(
            spread_type="custom",
            custom_spread={
                "num_cards": num_cards,
                "positions": positions
            }
        )
        await state.set_state(TarotReading.awaiting_question)
        await message.answer(
            f"–ü—Ä–∏–Ω—è—Ç–æ: —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ {num_cards} –∫–∞—Ä—Ç\n\n"
            "–¢–µ–ø–µ—Ä—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
        )
    except Exception as e:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@dp.message(TarotReading.awaiting_question)
async def handle_question(message: types.Message, state: FSMContext):
    is_allowed = await get_update_count(user_id=message.from_user.id)
    if not is_allowed:
        await message.answer("‚õî –í—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª–∏ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞.")
        await state.clear()
        return False
    user_data = await state.get_data()
    spread_type = user_data.get("spread_type")
    question = message.text
    loading_message, loading_task = await animate_loading(message, LOADING_MESSAGES)

    if spread_type == "custom":
        custom_data = user_data.get("custom_spread", {})
        num_cards = custom_data.get("num_cards", 3)
        positions = custom_data.get("positions", [])
    else:
        num_cards = {
            "spread_3": 3,
            "spread_10": 10,
            "spread_5_rel": 5
        }.get(spread_type, 3)
        positions = []

    drawn_cards = draw_random_cards(num_cards)

    cards_description = []
    for i, card in enumerate(drawn_cards):
        position_name = positions[i] if i < len(positions) else f"–ü–æ–∑–∏—Ü–∏—è {i + 1}"
        position_status = "üîª –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ" if card['position'] == '–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ' else "üî∫ –ø—Ä—è–º–æ–µ"
        cards_description.append(
            f"*{position_name}:* _{card['name']}_ ({position_status})\n"
            f"*–ó–Ω–∞—á–µ–Ω–∏–µ:* {card['meaning']}\n"
        )

    interpretation = await get_tarot_interpretation(
        spread_type=spread_type,
        question=question,
        cards=drawn_cards,
        positions=positions
    )

    response = (
        f"*üîÆ –í–∞—à —Ä–∞—Å–∫–ª–∞–¥ ({get_spread_name(spread_type)}):*\n\n" +
        "\n".join(cards_description) +
        f"\n\n*üìú –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:*\n{interpretation}"
    )
    loading_task.cancel()
    try:
        await loading_task
    except asyncio.CancelledError:
        pass

    try:
        await loading_message.delete()
    except Exception as e:
        print(f"[animate_loading] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    try:
        await message.answer(
            response,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    except Exception as e:
        print(f"Markdown error: {str(e)}")
        for i in range(0, len(response), 400):
            part = response[i:i + 400]
            await message.answer(part)

    await message.answer(
        "–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ä–∞—Å–∫–ª–∞–¥?",
        reply_markup=get_continue_keyboard()
    )
    await get_update_count(user_id=message.from_user.id)
    await state.clear()


async def animate_loading(message: types.Message, phrases: List[str], interval: float = 1.5) -> Tuple[types.Message, asyncio.Task]:
    msg = await message.answer(phrases[0])

    async def updater():
        i = 1
        while True:
            await asyncio.sleep(interval)
            try:
                await msg.edit_text(phrases[i % len(phrases)])
                i += 1
            except Exception as e:
                print(f"[animate_loading] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                continue

    task = asyncio.create_task(updater())
    return msg, task

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def draw_random_cards(num_cards: int) -> List[Dict]:
    cards = random.sample(TAROT_DECK, num_cards)
    for card in cards:
        card['position'] = random.choice(['–ø—Ä—è–º–æ–µ', '–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ'])
    return cards


def get_spread_name(spread_type: str) -> str:
    return {
        "spread_3": "–¢—Ä–∏ –∫–∞—Ä—Ç—ã",
        "spread_10": "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
        "spread_5_rel": "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "custom": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥"
    }.get(spread_type, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥")


async def get_tarot_interpretation(
        spread_type: str,
        question: str,
        cards: List[Dict],
        positions: Optional[List[str]] = None
) -> str:
    spread_name = get_spread_name(spread_type)
    cards_text = "\n".join(
        f"{positions[i] if i < len(positions) else f'–ü–æ–∑–∏—Ü–∏—è {i + 1}'}: "
        f"{card['name']} ({card['position']}) - {card['meaning']}"
        for i, card in enumerate(cards)
    )

    prompt = (
        f"–í–æ–ø—Ä–æ—Å: {question}\n"
        f"–¢–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞: {spread_name}\n"
        f"–í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã:\n{cards_text}\n\n"
        "–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —ç—Ç–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ, —É—á–∏—Ç—ã–≤–∞—è: "
        "–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç, –∏—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–µ (–ø—Ä—è–º–æ–µ/–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ), "
        "–ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–∞—Å–∫–ª–∞–¥–µ –∏ –∏—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏. "
        "–ë—É–¥—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º, –Ω–æ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º. "
        "–î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
    )

    headers = {
        "Content-Type": "application/json",
        "Authorization": TAROT_API_KEY,
    }

    data = {
        "model": "Qwen/Qwen3-235B-A22B-FP8",
        "messages": [
            {
                "role": "system",
                "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –î–∞–π —Ç–æ—á–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ. –ü–∏—à–∏ –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –∏ —Å–æ—á—É—Å—Ç–≤—É–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏ –≤ —Ç–µ–∫—Å—Ç–µ –¥–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –≤ –º–µ—Ä—É.–¢–µ–∫—Å—Ç –¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–º —Å –∞–±–∑–∞—Ü–∞–º–∏. –¢—ã –±—É–¥–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Telegram, –ø–æ—ç—Ç–æ–º—É —Ç–µ–±–µ –Ω–µ–ª—å–∑—è –ø—Ä–µ–≤—ã—à–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤."
            },
            {
                "role": "user",
                "content": prompt
            }
        ],
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                TAROT_API_URL,
                headers=headers,
                json=data,
                timeout=60.0
            )
            response.raise_for_status()
            result = response.json()
            pprint(result)
            if 'choices' in result and len(result['choices']) > 0:
                text =  result['choices'][0]['message']['content']
                return text.split("</think>\n\n")[1]
            else:
                print("Unexpected API response:", result)
                return generate_fallback_interpretation(cards, positions)

    except httpx.HTTPStatusError as e:
        print(f"HTTP error: {e.response.status_code} - {e.response.text}")
    except Exception as e:
        print(f"Error: {str(e)}")

    return generate_fallback_interpretation(cards, positions)


def generate_fallback_interpretation(cards: List[Dict], positions: List[str]) -> str:
    interpretation = "üîÆ –ë–∞–∑–æ–≤–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞:\n\n"

    for i, card in enumerate(cards):
        pos = positions[i] if i < len(positions) else f"–ü–æ–∑–∏—Ü–∏—è {i + 1}"
        interpretation += (
            f"{pos}: {card['name']} ({card['position']})\n"
            f"–ó–Ω–∞—á–µ–Ω–∏–µ: {card['meaning']}\n\n"
        )

    interpretation += (
        "\n–°–æ–≤–µ—Ç: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. "
        "–ü—Ä—è–º—ã–µ –∫–∞—Ä—Ç—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —è–≤–Ω—ã–µ –≤–ª–∏—è–Ω–∏—è, –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–µ - –Ω–∞ —Å–∫—Ä—ã—Ç—ã–µ –∞—Å–ø–µ–∫—Ç—ã."
    )

    return interpretation


async def main():
    dp.startup.register(on_startup)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())